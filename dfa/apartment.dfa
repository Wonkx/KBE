#! UG/KF 17.0
DefClass: Apartment (ug_base_part);
(Number Parameter) apartmentLength: 20;
(Number Parameter) apartmentWidth: 8;
(Number Parameter) apartmentArea: apartmentLength: * apartmentWidth:;
(Number Parameter) scalingFactor: apartmentLength: * 0.20;
(Number Parameter) apartmentHeight: 2.4;
(Number Parameter) wallThickness: 0.3;
(Number Parameter) floorThickness: 0.5;
(Number Parameter) roofThickness: 0.5;
(Number Parameter) numberOfRooms: 4;
(Boolean Parameter) hasBalcony: TRUE;
(Point Parameter) apartmentOrigin: point(0,0,floorThickness:);

  (Child) outline: {
  class; ug_block;
  Length; apartmentLength:;
  Width; apartmentWidth:;
  Height; apartmentHeight:;
  Origin; apartmentOrigin:;
  };
  
  (Child) sub: {
  class; ug_block;
  Length; apartmentLength: - 2*wallThickness:;
  Width; apartmentWidth: - 2*wallThickness:;
  Height; apartmentHeight:;
  Origin; apartmentOrigin: + vector(wallThickness:, wallThickness:, 0);
  Operation; Subtract;
  Target; {outline:};
  };
  
  (Child) door: {
  class; ug_block;
  Length; 1;
  Width; wallThickness:;
  Height; 1.9;
  Origin; apartmentOrigin: + vector(apartmentLength:/2 - child:door:Length:/2, apartmentWidth: - wallThickness:, 0);
  Operation; Subtract;
  Target; {outline:};
  };
  
   (Child) windowBalc: {
  class; ug_block;
  Length; wallThickness:;
  Width; 4;
  Height; 1;
  Origin; apartmentOrigin: + vector(0, 3, 0.5);
  Operation; Subtract;
  Target; {outline:};
  };
  
  (Child) windowKitch: {
  class; ug_block;
  Length; wallThickness:;
  Width; 4;
  Height; 0.5;
  Origin; apartmentOrigin: + vector(0, apartmentWidth: - 1 - child:windowBalc:Width:, 1.5);
  Operation; Subtract;
  Target; {outline:};
  };
  
  (Child) balc: {
  class; if (hasBalcony: = TRUE) then Balcony else NullDesign;
  balconyLength; 3;
  balconyWidth; 3;
  balconyHeight; 1;
  balconyOrigin; apartmentOrigin: + vector(0, -child:balconyWidth:, -floorThickness:);
  };
  
  (Child) balcDoor: {
  class; if (hasBalcony: = TRUE) then ug_block else NullDesign;
  Length; 1;
  Width; wallThickness:;
  Height; 1.9;
  Origin; apartmentOrigin: + vector(child:balc:balconyLength:/2 - child:balcDoor:Length:/2, 0, 0);
  Operation; Subtract;
  Target; {outline:};
  };
  
   (Child) kitchen: {
  class; Kitchen;
  apLength; apartmentLength;
  apWidth; apartmentWidth;
  kitchenOrigin; apartmentOrigin: + vector(wallThickness:, apartmentWidth: -wallThickness: -child:counterWidth:-1 , 0);
  };
  
  
    (Child) floor: {
  class; ug_block;
  Length; apartmentLength:;
  Width; apartmentWidth:;
  Height; floorThickness:;
  Origin; apartmentOrigin:+ vector(0, 0, -floorThickness:);
  };
  
      (Child) roof: {
  class; ug_block;
  Length; apartmentLength:;
  Width; apartmentWidth:;
  Height; roofThickness:;
  Origin; apartmentOrigin:+ vector(0, 0, apartmentHeight:);
  };


  (Child) room1: {  
  class; if (numberOfRooms: >= 1) then Room else NullDesign;
  roomLength; scalingFactor:;
  roomWidth; scalingFactor:; 
  roomHeight; apartmentHeight:;
  roomOrigin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength:, 0, 0);
  };
  (Child) windowRoom1: { 
    class; if (numberOfRooms: >= 1) then ug_block else NullDesign;
    Length; child:room1:roomLength: - 4*wallThickness:;
    Width; wallThickness:;
    Height; 1.5;
    Origin; apartmentOrigin: + vector(apartmentLength: - child:room1:roomLength:/2 - child:windowRoom1:Length:/2, 0, 0.5);
    Operation; Subtract;
    Target; {outline:};
    };
  
  
    (Child) room2: {  
    class; if (numberOfRooms: >= 2) then Room else NullDesign;
    roomLength; scalingFactor:;
    roomWidth; scalingFactor:; 
    roomHeight; apartmentHeight:;
    roomOrigin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength: -child:room2:roomLength:, 0, 0);
    };
    (Child) windowRoom2: { 
      class; if (numberOfRooms: >= 2) then ug_block else NullDesign;
      Length; child:room2:roomLength: - 4*wallThickness:;
      Width; wallThickness:;
      Height; 1.5;
      Origin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength:*2 + wallThickness:*2.5, 0, 0.5);
      Operation; Subtract;
      Target; {outline:};
      };

    
(Child) room3: {  
  class; if (numberOfRooms: >= 3) then Room else NullDesign;
  roomLength; scalingFactor:;
  roomWidth; scalingFactor:; 
  roomHeight; apartmentHeight:;
  roomOrigin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength: -child:room2:roomLength: -child:room3:roomLength:, 0, 0);
};
(Child) windowRoom3: { 
  class; if (numberOfRooms: >= 3) then ug_block else NullDesign;
  Length; child:room3:roomLength: - 4*wallThickness:;
  Width; wallThickness:;
  Height; 1.5;
  Origin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength:*3 + wallThickness:*2.5, 0, 0.5);
  Operation; Subtract;
  Target; {outline:};
  };


(Child) room4: {  
  class; if (numberOfRooms: >= 4) then Room else NullDesign;
  roomLength; scalingFactor:;
  roomWidth; scalingFactor:; 
  roomHeight; apartmentHeight:;
  roomOrigin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength: -child:room2:roomLength: -child:room3:roomLength: -child:room3:roomLength:, 0, 0);
};
(Child) windowRoom4: { 
  class; if (numberOfRooms: >= 4) then ug_block else NullDesign;
  Length; child:room3:roomLength: - 4*wallThickness:;
  Width; wallThickness:;
  Height; 1.5;
  Origin; apartmentOrigin: + vector(apartmentLength: -child:room1:roomLength:*4 + wallThickness:*2.5, 0, 0.5);
  Operation; Subtract;
  Target; {outline:};
  };
    
  
 
  